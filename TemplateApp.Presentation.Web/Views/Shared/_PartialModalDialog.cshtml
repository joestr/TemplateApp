@using TemplateApp.Presentation.Web.ViewModels.Shared
@model TemplateApp.Presentation.Web.ViewModels.Shared.PartialModalDialog
@{
    Layout = null;
}

@if (Model.IncludeContent) {
    <div id="@{ WriteLiteral($"{PartialModalDialog.ClassName()}_{Model.Identifier}_Content"); }">
        <div class="modal" style="overflow-y: visible;" data-id="@Model.OpenedModalDialogId">
            <div class="modal-content" style="overflow-y: visible;">
                <h5>@Model.Title</h5>
                <div>
                    @{
                        Model.Content.IncludeContent = true;
                        Model.Content.IncludeScript = false;
                    }
                    @await Html.PartialAsync("_PartialModalDialogContent", @Model.Content)
                </div>
            </div>
            <div class="modal-footer pl-5 pr-5">
                <a class="modal-close waves-effect btn filled" onclick="@{ WriteLiteral(Model.OnOkClickFunctionCalls); }">Ok</a>
            </div>
        </div>
    </div>
}
@if (Model.IncludeScript)
{
    <script src="~/js/classes/ModalDialog.js"></script>
    <script>
        var @{ WriteLiteral($"{PartialModalDialog.ClassName()}_{Model.Identifier}"); } = { }; 

        document.addEventListener("DOMContentLoaded", function () {
            let identifier = "@{ WriteLiteral($"{Model.Identifier}"); }";
            let refreshUrl = "@{ WriteLiteral($"{Model.RefreshUrl}"); }";
            let refreshOnEvents = @{ WriteLiteral($"{Model.RefreshOnEventsJson}"); };
            let contentElementId = "@{ WriteLiteral($"{PartialModalDialog.ClassName()}_{Model.Identifier}_Content"); }";
            /* Variables */
            let openedModalDialogId = @{ WriteLiteral(Model.OpenedModalDialogId != null ? $"\"{Model.OpenedModalDialogId}\"" : "null"); };

            @{ WriteLiteral($"{PartialModalDialog.ClassName()}_{Model.Identifier}"); } = new @{ WriteLiteral(PartialModalDialog.ClassName()); }(identifier, refreshUrl, refreshOnEvents, contentElementId, openedModalDialogId);
        });
    </script>

    Model.Content.IncludeContent = false;
    Model.Content.IncludeScript = true;
    @await Html.PartialAsync("_PartialModalDialogContent", @Model.Content)
}